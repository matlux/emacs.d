(ns clsudoku.core
  (:refer-clojure :exclude [== >= <= > <])
  (:use clojure.core.logic
        [clojure.core.logic.arithmetic :only [>= <= > < =]])
 ;;(:use [clojure.core.logic :only [run membero run* fresh conso]])
  )


;(keys (ns-interns *ns*))

(map #(ns-unmap *ns* %) (keys (ns-interns *ns*)))

(defn -main
  "I don't do a whole lot."
  [& args]
  (println "Hello, World!"))



(defn mysolution []
 (run*  [q]
       (fresh [a b c
               d e f
               g h ]
              (membero q [1 2 3 4 5 6 7 8 9])
              (conso q [a b c d e f g h] [1 2 3 4 5 6 7 8 9]))))

(defn mysolution2 []
 (run*  [q]
       (fresh [a b c
               d e f
               g h ]
              (membero q [1 2 3 4 5 6 7 8 9])
              (conso q [a b c d e f g h] [1 2 3 4 5 6 7 8 9]))))

(run* [q]
      (== q true))

(run* (q)
      u#
      (== 'corn q))

(run* (q)
      
      (let [x false]
        (== false q)))

(run* (q)
      (fresh [x]
             (== false x)
             (== true x)
             (== true q)))
(run* (q)
      s#)

(defn pair? [x]
   (or (lcons? x) (and (coll? x) (seq x))))

(run* (r)
      (fresh [x]
             (let [y x]
               (fresh [x]
                      (== (lcons y (lcons x (lcons y '()))) r)))))


(run* (r)
      (fresh [x y]
             (== (lcons x (lcons y '())) r)))
(run* (q)
      (fresh [x]
             (== true x)
             (== x q)))

(run* (q)
      (conde
       [u# s#]
       [s# u#]))

(run* (q)
      (conde
       [s# s#]
       [s# u#]))

(run* (q)
      (conde
       [(== 'olive q) s#]
       [(== 'oil q) s#]))

(run* (q)
      (conde
       [(== 'virgin q) u#]
       [(== 'olive q) s#]
       [s# s#]
       [(== 'oil q) s#]))

(run* (q)
      (fresh [x y]
             (conde
              [(== 'split x) (== 'pea y)]
              [(== 'navy x) (== 'bean y)])
             (== (lcons x (cons y '())) q)))

(run* (q)
      (fresh [x y]
             (conde
              [(== 'split x) (== 'pea y)]
              [(== 'navy x) (== 'bean y)])
             (== (list x y) q)))

(run* [q]
  (fresh [x y z]
    (conde
      ((== x "1st"))
      ((== y "2nd"))
      ((== z "3rd")))
    (== q [x y z])))

(doc conde)

(def teacupo (fn [x]
               (conde
                [(== 'tea x) s#]
                [(== 'cup x) s#])))

(run* (x) (teacupo x))

(run* (r)
      (fresh [x y]
             (conde
              ((teacupo x) (== true y) s#)
              ((== false x) (== true y)))
             (== (lcons x (lcons y '())) r)))

(run* (r)
      (fresh (x y z)
             (conde
              ((== y x) (fresh (x) (== z x)))
              ((fresh (x) (== y x)) (== z x)))
             (== (lcons y (lcons z '())) r)))

(run* (r)
      (fresh (x y z)
             (conde
              ((== y x) (fresh (x) (== z x)))
              ((fresh (x) (== y x)) (== z x)))
             (== false x)
             (== (lcons y (lcons z '())) r)))

(run* (q)
      (let [a (== true q)
            b (fresh [x]
                     (== x q)
                     (== false x))
            c (conde
               [(== true q) s#])]
        b))

(run* (r)
      (fresh (x y)
             (== (list x y) r)))


(run* (r)
      (firsto '(a c o r n) r))

(run* (r)
      (fresh (x y)
             (firsto (list r y) x)
             (== 'pear x)))


(run* (r)
      (fresh (x y)
             (resto '(grape raisin pear) x)
             (firsto '((a) (b) (c)) y)
             (== (lcons x y) r)))

(source resto)

(defn knight-moves 
"Returns the available moves for a knight (on a 8x8 grid) given its current position." 
 [x y]
(let [xmax 8 ymax 8]
 (run* [q] ;bring back all possible solutions
 (fresh [a b] ;like 'let' but for logic variables
  (conde ;;like OR
    [(< (+ x 1) xmax) (< (+ y 2) ymax) (== a (+ x 1)) (== b (+ y 2))] ;1st possibility
    [(< (+ x 2) xmax) (< (+ y 1) ymax) (== a (+ x 2)) (== b (+ y 1))] ;2nd possibility
    [(< (+ x 2) xmax) (>= (- y 1)   0) (== a (+ x 2)) (== b (- y 1))] ;3rd possibility
    [(< (+ x 1) xmax) (>= (- y 2)   0) (== a (+ x 1)) (== b (- y 2))] ;4th possibility
    [(>= (- x 1)   0) (>= (- y 2)   0) (== a (- x 1)) (== b (- y 2))] ;5th possibility
    [(>= (- x 2)   0) (>= (- y 1)   0) (== a (- x 2)) (== b (- y 1))] ;6th possibility
    [(>= (- x 2)   0) (< (+ y 1) ymax) (== a (- x 2)) (== b (+ y 1))] ;7th possibility
    [(>= (- x 1)   0) (< (+ y 2) ymax) (== a (- x 1)) (== b (+ y 2))] ;8th possibility
  ) 
  (== q [a b]))))) ;return each solution in a vector [x, y]

(def ^:const board (vec (range 8)))

(defn rook-moves 
"Returns the available moves for a rook (on a 8x8 grid) given its current position."
[x y]
 (run* [q]
 (fresh [a b]
 (conde 
  [(membero a board) (!= a x) (== b y)]  ;y remains constant
  [(membero b board) (!= b y) (== a x)]) ;x remains constant
     (== q [a b]))))

(defn bishop-moves 
"Returns the available moves for a bishop (on a 8x8 grid) given its current position and direction."
[x y]
(run* [q] 
(fresh [a b] 
  (membero a board) 
  (membero b board)
   (!= a x) 
   (!= b y)
   (project [x y a b]
    (== (Math/abs (- x a)) 
        (Math/abs (- y b)))
    (== q [a b])))))

(defn display-board1 [pos moves]
  (for [n (range 64)]
    (print "*")
    (when (= (rest n 8)))))

(knight-moves 0 1)

(bishop-moves 5 5)

(rook-moves 5 5)

(doc project)